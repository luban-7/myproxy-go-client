package protocol

type NatxMessageType int32

// 消息类型
const (
	// REGISTER_TO_SERVER 客户端注册
	REGISTER_TO_SERVER NatxMessageType = 0

	// KEEPALIVE_TO_CLIENT  心跳命令
	KEEPALIVE_TO_CLIENT NatxMessageType = 1
	KEEPALIVE_TO_SERVER NatxMessageType = -1

	// REAL_CONNECTED_TO_CLIENT 连接请求
	REAL_CONNECTED_TO_CLIENT NatxMessageType = 2
	REAL_CONNECTED_TO_SERVER NatxMessageType = -2

	// REAL_DISCONNECTED_TO_CLIENT 断开连接
	REAL_DISCONNECTED_TO_CLIENT NatxMessageType = 3
	REAL_DISCONNECTED_TO_SERVER NatxMessageType = -3

	// REAL_DATA_TO_CLIENT 数据
	REAL_DATA_TO_CLIENT NatxMessageType = 4
	REAL_DATA_TO_SERVER NatxMessageType = -4

	// REGISTER_RESULT_TO_CLIENT 注册结果
	REGISTER_RESULT_TO_CLIENT NatxMessageType = 5

	// SEND_MSG_TO_CLIENT 发送消息
	SEND_MSG_TO_CLIENT NatxMessageType = 6
)

func (p NatxMessageType) String() string {
	switch p {
	case REGISTER_TO_SERVER:
		return "REGISTER_TO_SERVER"

	case KEEPALIVE_TO_SERVER:
		return "KEEPALIVE_TO_SERVER"
	case KEEPALIVE_TO_CLIENT:
		return "KEEPALIVE_TO_CLIENT"

	case REAL_CONNECTED_TO_CLIENT:
		return "REAL_CONNECTED_TO_CLIENT"
	case REAL_CONNECTED_TO_SERVER:
		return "REAL_CONNECTED_TO_SERVER"

	case REAL_DISCONNECTED_TO_CLIENT:
		return "REAL_DISCONNECTED_TO_CLIENT"
	case REAL_DISCONNECTED_TO_SERVER:
		return "REAL_DISCONNECTED_TO_SERVER"

	case REAL_DATA_TO_CLIENT:
		return "REAL_DATA_TO_CLIENT"
	case REAL_DATA_TO_SERVER:
		return "REAL_DATA_TO_SERVER"

	case REGISTER_RESULT_TO_CLIENT:
		return "REGISTER_RESULT_TO_CLIENT"

	case SEND_MSG_TO_CLIENT:
		return "SEND_MSG_TO_CLIENT"
	}
	return "NONE"
}
